import java.util.*; public class Main { public static void main(String[] args) { selection_Sort(new int[]{2,5,1,9,6}); bubble_Sort(new int[]{2,5,1,9,6}); insertion_Sort(new int[]{6,9,7,3,2}); int[] mergeInput={7, 6, 4, 2, 9, 8}; System.out.println("\n\n\nArray before merge sort: "); for(int num: mergeInput){ System.out.print(num+"\t"); } merge_Sort(mergeInput, 0, 5); System.out.println("\nArray after merge sort: "); for(int num: mergeInput){ System.out.print(num+"\t"); } } public static void selection_Sort(int[] nums){ System.out.println("\nArray before selection sort: "); for(int num: nums){ System.out.print(num+"\t"); } for(int i=0;i<nums.length;i++){ int min=i; for(int j=i;j<nums.length;j++){ if(nums[min]>nums[j]){ min=j; } } int temp=nums[i]; nums[i]=nums[min]; nums[min]=temp; } System.out.println("\nArray after selection sort: "); for(int num: nums){ System.out.print(num+"\t"); } } public static void bubble_Sort(int[] nums){ System.out.println("\n\n\nArray before bubble sort: "); for(int num: nums){ System.out.print(num+"\t"); } for(int i=nums.length-1; i>=0; i--){ for(int j=0; j<i; j++){ if(nums[j]>nums[j+1]){ int temp=nums[j]; nums[j]=nums[j+1]; nums[j+1]=temp; } } } System.out.println("\nArray after bubble sort: "); for(int num: nums){ System.out.print(num+"\t"); } } public static void insertion_Sort(int[] nums){ System.out.println("\n\n\nArray before insertion sort: "); for(int num: nums){ System.out.print(num+"\t"); } for(int i=0; i<nums.length; i++){ for(int j=1; j<nums.length-i; j++){ if(nums[j]<nums[j-1]){ int temp=nums[j]; nums[j]=nums[j-1]; nums[j-1]=temp; } } } System.out.println("\nArray after insertion sort: "); for(int num: nums){ System.out.print(num+"\t"); } } public static void merge_Sort(int[] nums, int start, int end){ int mid=(start+end)/2; if(start>=end) return; merge_Sort(nums, start,mid); merge_Sort(nums, mid+1, end); merge(nums, start, mid, end); } public static void merge(int[] nums, int start, int mid, int end){ ArrayList<Integer> temp = new ArrayList<>(); int left=start; int right=mid+1; while(left<=mid && right<=end){ if(nums[left]<nums[right]){ temp.add(nums[left]); left++; } else{ temp.add(nums[right]); right++; } } while(left<=mid){ temp.add(nums[left]); left++; } while(right<=end){ temp.add(nums[right]); right++; } for(int i=start; i<=end;i++){ nums[i]=temp.get(i-start); } } }
